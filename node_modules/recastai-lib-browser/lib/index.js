'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _recorde = require('./recorde.js');

var _textRequest2 = require('./textRequest.js');

var _textRequest3 = _interopRequireDefault(_textRequest2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var Recast = function () {
    function Recast(token, option) {
      _classCallCheck(this, Recast);

      if (!token) {
        console.log('no TOKEN find');
        return;
      }
      this.webSocket = {
        ws: null,
        audioContext: null,
        audioInput: null,
        recorder: null,
        recording: false,
        audioTracks: null
      };
      this.userToken = token;
      if (option !== undefined) {
        this.debug = option.debug;
        this.language = option.language;
      }
    }
    /*
    *  Perform a speech request to Recast.AI
    *  open a Websoket
    */


    _createClass(Recast, [{
      key: 'startRecording',
      value: function startRecording() {
        if (!this.token) {
          return (0, _recorde.startRec)(this);
        }
        return 'no token';
      }

      /*
      * Close the speed reqest to Recast.AI
      * Close the Websoket
      */

    }, {
      key: 'stopRecording',
      value: function stopRecording() {
        (0, _recorde.stopRec)(this);
      }

      /*
      * Perform a text request to Recast.AI
      * @param {String} text: the text to process
      */

    }, {
      key: 'textRequest',
      value: function textRequest(text) {
        if (!this.token) {
          return (0, _textRequest3.default)(text, this);
        }
        return 'no token';
      }
    }]);

    return Recast;
  }();

  window.Recast = Recast;
  module.exports = Recast;
})();